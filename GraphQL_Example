const {ApolloServer , gql} = require('apollo-server');
// ApolloServer: 讓我們啟動 server 的 class ，不但實作許多 GraphQL 功能
//也提供 web application 的功能 (背後使用 express)
// gql: template literal tag, 讓你在 Javascript 中使用 GraphQL 語法

const users = [
    { id: 1, name: 'Fong', age: 23, height:165 , weight:50 },
    { id: 2, name: 'Kevin', age: 40, height:164 , weight:49  },
    { id: 3, name: 'Mary', age: 18, height:163 , weight:48 }
  ];

const posts = [
    { id: 1, authorId: 1, title: "Hello World!", content: "This is my first post.", likeGiverIds: [2] },
    { id: 2, authorId: 2, title: "Good Night", content: "Have a Nice Dream =)", likeGiverIds: [2, 3] },
    { id: 3, authorId: 1, title: "I Love U", content: "Here's my second post!", likeGiverIds: [] },
  ];

// 1. GraphQL Schema 定義
const typeDefs = gql`

    """
    使用者資訊
    
    """
    type User{
        id:ID!
        age:Int
        name:String
        "身高"
        height(unit: HeightUnit = CENTIMETRE):Float
        "體重"
        weight(unit: WeightUnit = KILOGRAM):Float
        "貼文"
        posts:[Post]
    }

    """
    高度單位
    """

    enum HeightUnit{
        "公尺"
        METRE
        "公分"
        CENTIMETRE
        "英尺"
        FOOT
    }

    """
    重量單位
    """
    enum WeightUnit{
        "公尺"
        KILOGRAM
        "公克"
        GRAM
        "磅"
        POUND
    }

    """
    貼文
    """
    type Post{
        "識別碼"
        id:ID!
        "作者"
        author:User
        "標題"
        title:String
        "內容"
        content:String
        "按讚者"
        likeGivers:[User]
    }

    type Query{
        me:User
        users:[User]
        user(name: String!):User
    }

    input AddPostInput{
        title:String!
        content:String
    }

    #Mutation
    type Mutation{
        "新增貼文"
        addPost(input:AddPostInput):Post
        "貼文按讚(收回讚)"
        likePost(postId:ID!):Post
    }
`;

const findUserById = id=>users.find(user=>user.id===id);
const findUserByName = name=>users.find(user=>user.name===Name);
const filterPostByAuthorId = author=>posts.filter(post=>post.authorId===author);
const meId = 1;
const findPostById = id=>posts.find(post=>post.id===id);

// 2. Resolvers 是一個會對照 Schema 中 field 的 function map ，讓你可以計算並回傳資料給 GraphQL Server
const resolvers = {
    Query:{
        me:()=>users[0],
        users:()=>users,
        user:(root,args,context)=>{
            const {name} = args;
            return users.find(user=>user.name===name);
        }
    },
    Mutation:{
        addPost:(root,args,context)=>{
            const {input} = args;
            const {title,content} = input;
            const newPost = {
                id:posts.length+1,
                authorId:meId,
                title,
                content,
                likeGivers:[]
            };
            posts.push(newPost);
            return newPost;
        },
        likePost:(root,args,context)=>{
            const {postId} = args;
            const post = findPostById(postId);
            if(!post)throw new Error(`Post ${postId} not exists`);
            if(post.likeGiverIds.includes(meId)){
                post.likeGiverIds.splice(index,1);
            }
            else{
                post.likeGiverIds.push(meId);
            }
            return post;
        }
    },
    User:{
        height:(parent,args)=>{
            const {unit} = args;
            if(!unit || unit==="CENTIMETRE")return parent.height;
            else if (unit === "METRE") return parent.height / 100;
            else if (unit === "FOOT") return parent.height / 30.48;
            throw new Error(`Height unit "${unit}" not supported.`);
        },
        weight:(parent,args,context)=>{
            const { unit } = args;
            // 支援 default 值 KILOGRAM
            if (!unit || unit === "KILOGRAM") return parent.weight;
            else if (unit === "GRAM") return parent.weight * 100;
            else if (unit === "POUND") return parent.weight / 0.45359237;
            throw new Error(`Weight unit "${unit}" not supported.`);
        },
        posts:(parent,args,context)=>{
            return filterPostByAuthorId(parent.id);
        }
    },
    Post:{
        likeGivers:(parent,args,context)=>{
            return parent.likeGiverIds.map(id=>findUserById(id));
        },
        author:(parent,args,context)=>{
            return findUserById(parent.authorId);
        }
    }
};

// 3. 初始化 Web Server ，需傳入 typeDefs (Schema) 與 resolvers (Resolver)
const server = new ApolloServer({
    typeDefs,resolvers
});

// 4. 啟動 Server
server.listen().then(({url})=>{console.log(`? Server ready at ${url}`)});
